#include <iostream>
#include <cstring>
#include <arpa/inet.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <unistd.h>
#include <thread>
#include <mutex>
#include <deque>
#include <stdio.h>
#include <stdlib.h>
#include <cstdlib>
#include <string.h>
#include <fcntl.h>
#include <errno.h>
#include <sys/types.h>
#include <sys/time.h>
#include <sys/mman.h>
#include <linux/videodev2.h>
#include <math.h>
#include <typeinfo>
#include <iostream>
#include <pthread.h>
#include <linux/i2c.h>
#include <sys/ioctl.h>
#include <ctime>
#include <chrono>
#include <atomic>

#include <arpa/inet.h>
#include <netinet/in.h>
#include <cstring> // memset()

#include <cstring>
#include <vector>

#include <opencv2/opencv.hpp>
#include <opencv2/highgui.hpp>
#include <opencv2/core.hpp>
#include "opencv2/imgproc.hpp"
#include <opencv2/imgcodecs.hpp>
#include <opencv2/core/mat.hpp>
#include <opencv2/videoio.hpp>

#include "resulthread.h"
#include "photo_video1.h"


#define PORT 14100
#define BUFFER_SIZE 1024
extern "C" {
    #include <linux/i2c-dev.h>
    #include "i2c/smbus.h"
}

#define CLEAR(x) memset(&(x), 0, sizeof(x))//очистка
#define   WIDTH   1920                       // The width of the picture
#define   HEIGHT  1080                       // The height of the picture
#define   FMT     V4L2_PIX_FMT_SGRBG8 // формат поддерживаемый матрицей (V4L2_PIX_FMT_SGRBG8 работает, но белый экран)
#define mydelay usleep (1000)// минимальная возможная задержка шага 100 мкс
#define pwmmydelay usleep (1000) // задержка между шагами
#define I2C4_PATH "/dev/i2c-3"
#define I2C2_PATH "/dev/i2c-1"
const unsigned default_port = 3425; // порт, по которому будет стучаться клиент
const int number_of_seconds = 5;   // кол-во секунд, что сервер будет хранить в памяти
#define INPUT_ADDR 0x22
#define INPUT_REG_P0 0x04
#define dev_name "/dev/video0"
const double default_fps = 25;      // должно совпадать с таким же значением из client.cpp
cv::VideoWriter writer;
using namespace cv;
using namespace std;
int grows = 1920; // высота
int gcols = 1080; // и ширина текущего видео захвата
deque<Mat> q;  // очередь с кадрами
mutex qmutex;  // мьютекс для охраны очереди
int working = 0;


// EDIT 10 08 2023
char*				BUFIMAGE = new char [WIDTH*HEIGHT];
char*				BUFIMAGER = new char [WIDTH*HEIGHT];
char*				BUFIMAGEG = new char [WIDTH*HEIGHT];
char*				BUFIMAGEB = new char [WIDTH*HEIGHT];
Mat				greyImg, imgR, imgG, imgB, imgM, colorImg;
time_t 			now;
	char* 				dt;
	vector<uchar>*			buffer_img;
//





       v4l2_format			fmt; // формат видео
       v4l2_buffer              	buf; //
       v4l2_requestbuffers      	req; //
       v4l2_capability          	device_params; //параметры видеомодуля
       v4l2_buf_type            	type;
       fd_set                   	fds;
       timeval                  	tv;

       int				r, fd = -1;

       unsigned int			i, n_buffers;

       buffer*			buffers;

       char*				val = (char*)malloc(sizeof(char)*1*WIDTH*HEIGHT);

       using namespace cv;
       using namespace std;


       unsigned char read_buffer[1024];
       int				num_bytes;
       int  bytes_read = 0;
       int o = 0;
       int 				read_operation = 16;
       unsigned char get_buffer[256];
       long int				count_bytes = 0;
       unsigned char number_data;
       unsigned char byte_bytestuff = 0x00;
   	unsigned char buffer_bytestuff[1] = {0x00};
	uint16_t			CRC16;
	uint16_t			CRC16_get;
	unsigned char translate_buffer[20000000] = {0};
	unsigned char output_buffer[20000000] = {0};
	unsigned char number_stop_kadr;
	int number_out_data;
	unsigned char H_adress_begin_stop_kadr;
		unsigned char L_adress_begin_stop_kadr;
		unsigned char M_adress_begin_stop_kadr;
		unsigned char H_size_stop_kadr;
		unsigned char M_size_stop_kadr;
		unsigned char L_size_stop_kadr;
		time_t 			new_time = 0;
		unsigned char val_from;
		struct tm   get_time = {0};

		int				step_preambula;
		unsigned int			j, start_time, end_time, search_time;
		int test_byte = 0;
		int size_kadr;
		int start_kadr;
		/*unsigned char start_byte = 0xA5;
		unsigned char module_vk = 0x0B;
		unsigned char rezhim = 0x02;*/
		timeval 			time_field;
		int				result_time;
		vector<uchar> photo_alarm;



		vector<uchar> photo_0_before_alarm;
		vector<uchar> photo_1_before_alarm;
		vector<uchar> photo_2_before_alarm;
		vector<uchar> photo_after_alarm;
		int step_up = 0;
		//unsigned char preambula[1] = {0xFF};
		int status_thread;
		pthread_t photo_thread;


		int iter = 0;
        bool flag=false;



       // структура для получения значения из потока с плавающей запятой
       typedef struct someArgs_tag {
           int id;
           const char *msg;
           double out[2];
       } someArgs_t;













int main() {

	  photo_alarm.clear();

	//блок получения IP адреса по UDP
    int sockfd;
    char clientIP[INET_ADDRSTRLEN];
    bool ipReceived = false;
    struct sockaddr_in serverAddr, clientAddr;
    char buffera[BUFFER_SIZE];

    // Создаем сокет UDP
    if ((sockfd = socket(AF_INET, SOCK_DGRAM, 0)) < 0) {
        perror("Socket creation failed");
        return 1;
    }

    // Настраиваем адрес сервера для прослушивания на всех интерфейсах и порту 3425
    memset(&serverAddr, 0, sizeof(serverAddr));
    serverAddr.sin_family = AF_INET;
    serverAddr.sin_addr.s_addr = htonl(INADDR_ANY);
    serverAddr.sin_port = htons(PORT);

    // Привязываем сокет к адресу сервера
    if (bind(sockfd, (struct sockaddr *)&serverAddr, sizeof(serverAddr)) < 0) {
        perror("Binding failed");
        return 1;
    }

    while (!ipReceived) {

        // Получаем пакет
        socklen_t clientAddrLen = sizeof(clientAddr);
        ssize_t bytesRead = recvfrom(sockfd, buffera, BUFFER_SIZE, 0, (struct sockaddr *)&clientAddr, &clientAddrLen);
        if (bytesRead < 0) {
            perror("Receive failed");
            return 1;
        }

        // Преобразование полученных данных в строку
        std::string receivedData(buffera, bytesRead);
cout<<"+"<<endl;
        // Выводим содержимое пакета


        // Преобразование полученного IP-адреса из сетевого порядка байтов в строку

        inet_ntop(AF_INET, &(clientAddr.sin_addr), clientIP, INET_ADDRSTRLEN);
        cout<<"- "<<endl;
        // Выводим IP-адрес клиента
        std::cout << "Client IP address: " << clientIP << std::endl;
        ipReceived=true;
    }

    // Закрыть сокет (этот код никогда не будет достигнут)
    //close(sockfd);



    // Блок подключения по TCP/IP
    int sock = socket(AF_INET, SOCK_STREAM, 0);
    if (sock < 0) {
        perror("socket");
        exit(1);
    }
    fcntl(sock, F_SETFL, O_RDWR | O_NONBLOCK);
    // IP и порт сервера
    unsigned short serverPort = 14100;

    // Создание структуры адреса сервера
    struct sockaddr_in serverAddress{};
    serverAddress.sin_family = AF_INET;
    serverAddress.sin_port = htons(serverPort);
    cout<<"Client IP:"<<clientIP<<endl;

    if (inet_pton(AF_INET, clientIP, &(serverAddress.sin_addr)) <= 0) {
        perror("inet_pton");
        close(sock);
        return 1;
    }

    // Подключение к серверу
    while (connect(sock, (struct sockaddr *)&serverAddress, sizeof(serverAddress)) < 0) {
        //perror("connect");
        //exit(1);
    	sleep(1);
    }

    // Успешное подключение
    std::cout << "Connected to the server!" << std::endl;



cout<<"Podklyschil k Mishe"<<endl;


        //блок чтения данных(команд) с байстаффинга
        //получение данных с сокета
        	while (true) {


        	read_buffer[0] = 0x00;  // Устанавливает первый элемент массива read_buffer равным 0x00.

        	do {
        		num_bytes = 1;  // Устанавливает количество читаемых байт равным 1.
        		o = 0;
        		cout<<"Komanda polychena"<<endl;
        		cout<<endl;
        		cout<<endl;
        		do {
        			bytes_read = recv(sock, read_buffer, num_bytes, 0);

        			if ((bytes_read==-1)&&(errno==11)){
        				bytes_read=0;
        			}
        		} while ((read_buffer[0] != start_byte) & (bytes_read > 0));  // Продолжает цикл, пока первый элемент массива read_buffer не равен start_byte и количество прочитанных байт больше 0.

        		if (bytes_read > 0) {
        			get_buffer[0] = read_buffer[0];
        			printf("buffer[0] = %02X\n", get_buffer[0]);
        			printf("i = %d\n", o);
        			o++;
        			read_operation = 1;

        			while (read_operation != 0) {
        				o = 0;

        				switch (read_operation) {
        					case 1: {
        						num_bytes = 5;
        						count_bytes = 1;

        						while (num_bytes > 0) {
        							bytes_read = recv(sock, &buffer_bytestuff, 1, 0);  // Читает данные из сокета в переменную buffer_bytestuff.


        							if (bytes_read < 0)
        								break;

        							if (bytes_read > 0) {
        								if (buffer_bytestuff[0] == start_byte)
        									break;

        								if (buffer_bytestuff[0] != 0x1B) {
        									byte_bytestuff = buffer_bytestuff[0];
        								} else {
        									bytes_read = read(sock, &buffer_bytestuff, 1);
        									if (buffer_bytestuff[0] == start_byte)
        										break;
        									byte_bytestuff = buffer_bytestuff[0] - 0x20;
        								}

        								read_buffer[count_bytes++] = byte_bytestuff;
        								num_bytes--;
        							}
        						}

        						for (i = 1; i < count_bytes; i++) {
        							get_buffer[i] = read_buffer[i];
        						}

        						number_data = ((read_buffer[3] & 0x0F) * 0x100) + read_buffer[4] + 1 + 1;  // Вычисляет количество данных.
        						read_operation = 2;
        					} break;

        					case 2: {
        						num_bytes = number_data;
        						count_bytes = 6;

        						while (num_bytes > 0) {
        							bytes_read = recv(sock, &buffer_bytestuff, 1,0);  // Читает данные из последовательного порта в переменную buffer_bytestuff.

        							if (bytes_read < 0)
        								break;

        							if (bytes_read > 0) {
        								if (buffer_bytestuff[0] == start_byte)
        									break;

        								if (buffer_bytestuff[0] != 0x1B) {
        									byte_bytestuff = buffer_bytestuff[0];
        								} else {
        									bytes_read = recv(sock, &buffer_bytestuff, 1,0);
        									if (buffer_bytestuff[0] == start_byte)
        										break;
        									byte_bytestuff = buffer_bytestuff[0] - 0x20;
        								}

        								read_buffer[count_bytes++] = byte_bytestuff;
        								num_bytes--;
        							}
        						}

        						for (i = 6; i < count_bytes; i++) {
        							get_buffer[i] = read_buffer[i];
        							printf("buffer[%d] = %02X\n", i, get_buffer[i]);
        						}

        						read_operation = 0;
        					} break;

        					default: {
        						read_operation = 0;
        					} break;
        				}
        			}
        		}
cout << "KONES proxoda cikla"<<endl;
cout <<"BYTES_READ: "<<bytes_read<<endl;
        	} while ((read_buffer[0] != start_byte) && (bytes_read > 0));  // Продолжает цикл, пока первый элемент массива read_buffer не равен start_byte и количество прочитанных байт больше 0.

        	printf("END_GET\n");



cout << "CRC NACHALO POSHLO"<<endl;

        	//блок подсчета CRC полученного смс
cout << "COUNT_BYTES:="<<count_bytes<<endl;

        			CRC16 = calculation_crc(get_buffer, (count_bytes-2));//printf("CRC16 = %x\n", CRC16); то что подсчитали из полученного смс

        			CRC16_get = (get_buffer[count_bytes -2] << 8) | get_buffer[count_bytes-1];//printf("CRC16_get = %x\n", CRC16_get); то что получили из сообщения
        			val_from = get_buffer[1];
        			count_bytes = 0;

        			printf("Значение CRC16(GET): %02X\n", CRC16_get);
        			cout << "CRC16="<<CRC16<<endl;
        			cout << "CRC16_Get="<<CRC16_get<<endl;

        			// блок считывания команду в полученном смс
if (CRC16 == CRC16_get){ // если равны , то получено смс верно
			printf("CRC\n");


			//сделать проверку на сообщение таблица 7 (байт 5) 0xBB

			//блок управления командами, полученными в смс
				switch(get_buffer[8]){

				//блок команды 0хВ1
					case 0xB1: {//сделать стоп-кадр
						//Установка времени
						//Ввести проверку на NULL
						printf("B1 command start!\n");
						struct tm 				get_time = {0};
						if(get_buffer[4] == 0x0B){
							printf("buffer = %02d\n",  get_buffer[15]);
							printf("buffer = %02d\n",  get_buffer[14]);
							printf("buffer = %02d\n",  get_buffer[13]);
							printf("buffer = %02d\n",  get_buffer[10]);
							printf("buffer = %02d\n",  get_buffer[11]);
							printf("buffer = %02d\n",  get_buffer[12]);
							get_time.tm_sec = get_buffer[15];      	// секунды
							printf("start\n",  test_byte);
							get_time.tm_min = get_buffer[14];    		// минуты
							get_time.tm_hour = get_buffer[13];	   	// часы
							get_time.tm_mday = get_buffer[10];     	// день
							get_time.tm_mon = get_buffer[11]-1;		// месяц
							get_time.tm_year = get_buffer[12]+100;		// год

							new_time = mktime(&get_time);
							cout << "The local date and time is: " << ctime(&new_time) << endl;
							time_field.tv_sec = new_time;
							printf("time %ld\n", time_field.tv_sec);
							time_field.tv_usec=0;

							result_time = settimeofday(&time_field,NULL);
							if(result_time < 0){
								fprintf(stderr,"Error setting the Time.\n");
								return 0;
							}
						}



////////////////////////////////////////////////////////////////
						fd = open(dev_name_0, O_RDWR | O_NONBLOCK);
							if (fd < 0){
								perror("Cannot open device video1");
								exit (EXIT_FAILURE);
							}

							CLEAR(device_params);
							xioctl(fd,VIDIOC_QUERYCAP, &device_params);

							CLEAR(fmt);
							fmt.type 		 = V4L2_BUF_TYPE_VIDEO_CAPTURE;
							fmt.fmt.pix.width       = WIDTH;
							fmt.fmt.pix.height      = HEIGHT;
							fmt.fmt.pix.pixelformat = FMT_video0;
							fmt.fmt.pix.field       = V4L2_FIELD_NONE;
							xioctl(fd, VIDIOC_S_FMT, &fmt);
							if (fmt.fmt.pix.pixelformat != FMT_video0) {
								printf("Libv4l didn't accept ЭТОТ format. Can't proceed video0.\\n");
								exit(EXIT_FAILURE);
							}

							CLEAR(req);
							req.count = 1;
							req.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
							req.memory = V4L2_MEMORY_MMAP;
							xioctl(fd, VIDIOC_REQBUFS, &req);

							buffers = (buffer*) calloc (req.count, sizeof(*buffers));
							if(!buffers){
								perror("Out of memory\n");
								exit(EXIT_FAILURE);
							}

							for (n_buffers = 0; n_buffers < req.count; ++n_buffers) {
								CLEAR(buf);

								buf.type        = V4L2_BUF_TYPE_VIDEO_CAPTURE;
								buf.memory      = V4L2_MEMORY_MMAP;
								buf.index       = n_buffers;

								xioctl(fd, VIDIOC_QUERYBUF, &buf);

								buffers[n_buffers].length = buf.length;
								buffers[n_buffers].start = mmap(NULL, buf.length,
									  PROT_READ | PROT_WRITE, MAP_SHARED,
									  fd, buf.m.offset);
								if (MAP_FAILED == buffers[n_buffers].start) {
								    printf("MAP fail. Can't proceed.\\n");perror("mmap");
								    printf("MAP fail. Can't proceed.\\n");
								    exit(EXIT_FAILURE);
								}
							}

							for (i = 0; i < n_buffers ; ++i) {
								CLEAR(buf);
								buf.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
								buf.memory = V4L2_MEMORY_MMAP;
								buf.index = i;
								xioctl(fd, VIDIOC_QBUF, &buf);
							}

							type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
							xioctl(fd, VIDIOC_STREAMON, &type);

							buf.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
							buf.memory = V4L2_MEMORY_MMAP;
							xioctl(fd, VIDIOC_DQBUF, &buf);

							memcpy(val, buffers[buf.index].start, buf.bytesused);

							for (j = 0 ; j < (WIDTH*HEIGHT); j++){
								BUFIMAGE [j] = val [j];
							}

							CLEAR(buf);
							buf.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
							buf.memory = V4L2_MEMORY_MMAP;
							xioctl(fd, VIDIOC_QBUF, &buf);
							type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
							xioctl(fd, VIDIOC_STREAMOFF, &type);

							for (i = 0; i < n_buffers; ++i){
								munmap(buffers[i].start, buffers[i].length);
							}
							close(fd);
							 colorImg.release();

							now = time(0);
							dt = ctime(&now);
							greyImg = Mat(HEIGHT, WIDTH, CV_8U, BUFIMAGE);


							vector<int> param(2);
							char name[100];
							param[0] = IMWRITE_JPEG_QUALITY;
							param[1] = 65;//default(95) 0-100
							sprintf(name, "cropped%02d.jpg", k);

							imwrite(name, greyImg);
							cvtColor(greyImg, colorImg, COLOR_BayerGR2RGB);
							//imwrite("cropped.jpg", colorImg);
							putText(colorImg,dt,Point(50,50),FONT_HERSHEY_DUPLEX,2,Scalar(255,120,255),2,false);



						imencode(".jpg", colorImg, *buffer_img, param);
						flag=true;

						//	imencode(".jpg", colorImg, *buffer_img, param);
						printf("Image saved!");

						free(val);
						    delete[] BUFIMAGE;
						    delete[] BUFIMAGER;
						    delete[] BUFIMAGEG;
						    delete[] BUFIMAGEB;
						    free(buffers);
						    // Очистка переменной buffer_img
						    //delete buffer_img;
						    //buffer_img = nullptr;

						    colorImg.release();
						cout << endl;

						/////////////////////////////////////////////////////////////////////////////////
						printf("PHOTO DONE!  \n");

	cout << "!!!!!!!!"<<endl;
						//Ответ ( подготовка буфера)
						translate_buffer[0] = start_byte;
						translate_buffer[1] = module_vk;
						translate_buffer[2] = val_from;
						translate_buffer[3] = 0x00;
						translate_buffer[4] = 0x03;
						translate_buffer[5] = 0xBB; // сообщение для камеры
						translate_buffer[6] = 0x00; //код участка
						translate_buffer[7] = 0x00;//номер камеры
						translate_buffer[8] = 0x0A; // код камеры
						CRC16 = calculation_crc(translate_buffer, 9);//printf("CRC16 = %x\n", CRC16);
						cout << "new CRC16="<<CRC16<<endl;
						translate_buffer[9] = CRC16 >> 8;
						translate_buffer[10] = CRC16 & 0x00FF;
						printf("Otvet formiryetsya \n");


						//байтстаффинг ответа
						i = 1;
						j = 1;
						output_buffer[0] = translate_buffer[0];
						while(i < 11){
							if(translate_buffer[i] == 0xA5){
								output_buffer[j] = 0x1B;
								j++;
								output_buffer[j] = 0xC5;
							} else {
								if(translate_buffer[i] == 0x1B){
									output_buffer[j] = 0x1B;
									j++;
									output_buffer[j] = 0x3B;
								} else {
									output_buffer[j] = translate_buffer[i];
								}
							}
							i++;
							j++;
						}


						for (step_preambula = 0; step_preambula < step_up; step_preambula++){
							send(sock, preambula, 1, 0);
						}
						for (i=0;i<20;i++){
							cout << "I:"<< i<<endl;

							printf("Значение output_buffer: %02X\n", output_buffer[i]);
						}
					//	printf("Значение output_buffer[0]: %02X\n", output_buffer[0]);
cout << "J="<<j<<endl;

						write(sock, &output_buffer[0], j);
i=0;
j=0;

						printf("Otvet zapisyvaetsya \n");

						//очистка буферов
						memset(&get_buffer, '\0', sizeof(get_buffer));
						memset(&read_buffer, '\0', sizeof(read_buffer));
						memset(&translate_buffer, '\0', sizeof(translate_buffer));
memset(&output_buffer,'\0', sizeof(output_buffer));
						cout << "END B1!"<<endl;


						///СДЕЛАТЬ КАДРЫ
						//FF FF FF FF FF A5 0A 0B 00 03 BB 00 00 B1 DA 24 22
						//FF FF FF FF FF A5 0A 0B 00 05 BB 00 00 5A 00 00 4D 4F 22


} break;



					//блок команды 0хС0
					case 0xC0: {
						printf("start C0!\n");


						printf("size_photo = %ld\n", photo_alarm.size());
						//exit(EXIT_FAILURE);


								translate_buffer[0] = start_byte;
								translate_buffer[1] = module_vk;
								translate_buffer[2] = val_from;
								translate_buffer[3] = 0x00;
								translate_buffer[4] = 0x14;// size 5 photo
								translate_buffer[5] = 0xBB;
								translate_buffer[6] = 0x00;
								translate_buffer[7] = 0x00;
								translate_buffer[8] = 0xC1;
								translate_buffer[9] = rezhim;
								translate_buffer[10] = 0x00; //номер группы фото // пока пусть будет 0
								translate_buffer[11] = 0x00;//photo_0_before_alarm.size() >> 16;;// наличие размера фото является указанием на наличие самой фото
								translate_buffer[12] = 0x00;//(photo_0_before_alarm.size() >> 8) & 0x00FF;
								translate_buffer[13] = 0x00;//photo_0_before_alarm.size() & 0x0000FF;
								translate_buffer[14] = 0x00;//photo_1_before_alarm.size() >> 16;;
								translate_buffer[15] = 0x00;//(photo_1_before_alarm.size() >> 8) & 0x00FF;
								translate_buffer[16] = 0x00;//photo_1_before_alarm.size() & 0x0000FF;
								translate_buffer[17] = 0x00;//photo_2_before_alarm.size() >> 16;;
								translate_buffer[18] = 0x00;//(photo_2_before_alarm.size() >> 8) & 0x00FF;
								translate_buffer[19] = 0x00;//photo_2_before_alarm.size() & 0x0000FF;
								translate_buffer[20] = photo_alarm.size() >> 16;
								translate_buffer[21] = (photo_alarm.size() >> 8) & 0x00FF;
								translate_buffer[22] = photo_alarm.size() & 0x0000FF;
								translate_buffer[23] = 0x00;
								translate_buffer[24] = 0x00;
								translate_buffer[25] = 0x00;
								CRC16 = calculation_crc(translate_buffer, 26);//printf("CRC166 = %x\n", CRC16);
								translate_buffer[26] = CRC16 >> 8;
								translate_buffer[27] = CRC16 & 0x00FF;
								 // конец подготовки к передаче
								i = 1;
								j = 1;
								output_buffer[0] = translate_buffer[0];
								while(i < 28){//проверка на байтстаффинг
									if(translate_buffer[i] == 0xA5){
										output_buffer[j] = 0x1B;
										j++;
										output_buffer[j] = 0xC5;
									} else {
										if(translate_buffer[i] == 0x1B){
											output_buffer[j] = 0x1B;
											j++;
											output_buffer[j] = 0x3B;
										} else {
											output_buffer[j] = translate_buffer[i];
										}
									}
									i++;
									j++;
								}


									write(sock, &output_buffer[0], j);//передача кадра по UART (ETHERNET)

								cout << "J:="<<j<<endl;

								for(int z = 0;z<30;z++)
								{
						printf("%02X ", output_buffer[z]);

								}

									memset(&get_buffer, '\0', sizeof(get_buffer));
									memset(&read_buffer, '\0', sizeof(read_buffer));
									memset(&translate_buffer, '\0', sizeof(translate_buffer));
									memset(&output_buffer, '\0', sizeof(output_buffer));

									i = 0;
									j = 0;

						printf("C0 END!\n");
						//exit(EXIT_FAILURE);

					} break;


//блок D3
				case 0xD3: {
cout<<"D3 command start... "<< endl;
					  // Получение номера стоп-кадра и других параметров из полученного буфера
number_out_data=get_buffer[10] * 256 * 256 + get_buffer[11] * 256 + get_buffer[12] + 1 + 3 + 3 + 3;


					    number_stop_kadr = get_buffer[9];

					    H_size_stop_kadr = get_buffer[10];
					    M_size_stop_kadr = get_buffer[11];
					    L_size_stop_kadr = get_buffer[12];
					    size_kadr = H_size_stop_kadr * 256 * 256 + M_size_stop_kadr * 256 + L_size_stop_kadr;


					    printf("Значение Number_out_data:= %02X\n", number_out_data);


cout << "SIZE_KADR="<<size_kadr<<endl;

   // Заполнение буфера для передачи по RS485
					    translate_buffer[0] = start_byte;
					    translate_buffer[1] = module_vk;
					    translate_buffer[2] = val_from;
					    translate_buffer[3] = (number_out_data >> 24) & 0xFF; // Старший байт
					    translate_buffer[4] = (number_out_data >> 16) & 0xFF; // Следующий байт после старшего
					    translate_buffer[5] = 0xBB;
					    translate_buffer[6] = (number_out_data >> 8) & 0xFF; // Следующий байт после младшего
					    translate_buffer[7] = number_out_data & 0xFF; // Младший байт
					    translate_buffer[8] = 0xE3; // ответ
					    translate_buffer[9] = number_stop_kadr;

					    printf("Number_out_data[3]=%02X \n",translate_buffer[3]);
					    printf("Number_out_data[4]=%02X \n",translate_buffer[4]);
					    printf("Number_out_data[6]=%02X \n",translate_buffer[6]);
					    printf("Number_out_data[7]=%02X \n",translate_buffer[7]);


					    printf("Значение Number stop kadr:= %02X\n", number_stop_kadr);
					    // Копирование данных стоп-кадра в буфер для передачи
					    switch (number_stop_kadr) {
					        case 4: {
					            memcpy(translate_buffer + 10, &photo_alarm[start_kadr], size_kadr);
					            printf("memcopy 4\n");
					        } break;

					        case 5: {
					            //memcpy(translate_buffer+ 10, &photo_after_alarm[start_kadr], size_kadr);
					        	exit(1);
					            printf("memcopy 5\n");
					        } break;

					        default: {
					            break;
					            //memcpy(translate_buffer + 16, test_buffer + start_kadr, size_kadr);
					            //memcpy(translate_buffer + 16, &photo_0_before_alarm[start_kadr], size_kadr);
					            //printf("memcopy default\n");
					        } break;
					    }
					    cout << "memcpy+"<<endl;

					    // Расчет контрольной суммы CRC16
					    CRC16 = calculation_crc(translate_buffer, (size_kadr + 9 + 1));//(size_kadr + 15 + 1)
					    //printf("CRC16 = %x\n", CRC16);

					    // Добавление контрольной суммы в буфер для передачи
					    translate_buffer[(size_kadr + 9 + 1)] = CRC16 >> 8;//[(size_kadr + 15 + 1)]
					    translate_buffer[(size_kadr + 9 + 2)] = CRC16 & 0x00FF;//[(size_kadr + 15 + 1)]

					    i = 1;
					    j = 1;
					    output_buffer[0] = translate_buffer[0];


					    // Замена байтов 0xA5 и 0x1B в буфере для передачи(байтстаффинг)
					    while (i < ((size_kadr + 9 + 2) + 1)) {
					        if (translate_buffer[i] == 0xA5) {
					            output_buffer[j] = 0x1B;
					            j++;
					            output_buffer[j] = 0xC5;
					            printf("increase a5\n");
					        } else {
					            if (translate_buffer[i] == 0x1B) {
					                output_buffer[j] = 0x1B;
					                j++;
					                output_buffer[j] = 0x3B;
					                printf("increase 1b\n");
					            } else {
					                output_buffer[j] = translate_buffer[i];
					            }
					        }

					        i++;
					        j++;
					    }

					    cout << " OTVET SERVERy: "<<endl;
					    cout << endl;
					    					  /*  for(int z = 0;z<200;z++)
					    					                       {
					    					                       	printf("%02X ", output_buffer[z]);

					    					                       }
					    					                       printf("\n");
					    					                       cout<< endl;*/

					    printf("write\n");
					    printf("j = %d\n", j);



					    // Запись буфера в последовательный порт
					    send(sock, &output_buffer[0], j, 0);





					    // Открытие файла для записи
					        FILE* file = fopen("output_file.txt", "w"); // "w" означает, что файл открывается для записи

					        if (file != NULL) {
					            // Сохранение содержимого буфера в файл в формате "XX "
					            for (int i = 0; i < 140000; i++) {
					                fprintf(file, "%02X ",(translate_buffer[i]));
					            }

					            fclose(file); // Закрываем файл после записи
					            printf("Буфер успешно сохранен в файл.\n");
					        } else {
					            printf("Ошибка открытия файла.\n");
					        }


//cout<<"OTVET SEND!"<<endl;
//exit(1);
/*
					    cout << " OTVET SERVERy: "<<endl;
cout << endl;
					    for(int z = 0;z<50;z++)
					                       {
					                       	printf("%02X ", output_buffer[z]);

					                       }
					                       printf("\n");
					                       cout<< endl;
*/
					    // Очистка буферов и переменных
					    memset(&get_buffer, '\0', sizeof(get_buffer));
					    memset(&read_buffer, '\0', sizeof(read_buffer));
					    memset(&translate_buffer, '\0', sizeof(translate_buffer));
					    memset(&output_buffer, '\0', sizeof(output_buffer));
					    i = 0;
					    j = 0;

					    printf("end write\n");

					    // Проверка условия для очистки данных после передачи фото
					    if ((number_stop_kadr == static_cast<int>(0x04)) && ((size_kadr + start_kadr) >= photo_alarm.size())) {
					        photo_0_before_alarm.clear();
					        photo_1_before_alarm.clear();
					        photo_2_before_alarm.clear();
					        photo_alarm.clear();
					        photo_after_alarm.clear();

					        printf("clear\n");
					        printf("clear done = %d\n", photo_alarm_done);
					        //exit(EXIT_FAILURE);
					    }
					    printf("D3 END!\n");
					} break;





//блок остальных команд
default : {
	break;
}break;
}
}
						//}

}


    return 0;

}
